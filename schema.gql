# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Advisor {
  active: Boolean!
  advisor_id: Int!
  advisor_notes: [AdvisorNote!]!
  assigned_workshops: [Workshop!]!
  email: String!
  first_name: String!
  languages: [AdvisorLanguage!]!
  last_name: String!
  regions: [AdvisorRegion!]!
  requested_workshops: [Workshop!]!
  unavailable_days: [AdvisorUnavailableDay!]!
}

type AdvisorLanguage {
  advisor: Advisor!
  advisor_id: Int!
  advisor_language: String!
  language_id: Int!
}

type AdvisorNote {
  advisor_id: Int!
  advisor_note: String!
  created_at: DateTime!
  created_by: Int!
  date_of_note: DateTime!
  note_id: Int!
}

type AdvisorRegion {
  advisor_id: Int!
  advisor_region: REGION!
  region_id: Int!
}

type AdvisorUnavailableDay {
  advisor_id: Int!
  day_unavailable: DateTime!
  note: String
  unavailable_id: Int!
}

type ChangeLog {
  created_at: DateTime!
  log_id: Int!
  note: String!
  workshop_id: Int!
}

type Client {
  active: Boolean!
  business_unit: String
  client_id: Int!
  client_name: String!
  client_notes: [ClientNote!]!
  created_at: DateTime!
  created_by: Int!
  licenses: [License!]!
  workshops: [Workshop!]!
}

type ClientNote {
  client_id: Int!
  created_at: DateTime!
  created_by: Int!
  note: String!
  note_id: Int!
}

type Course {
  active: Boolean!
  course_description: String!
  course_id: Int!
  course_name: String!
  coursework: [Coursework!]!
  created_at: DateTime!
  created_by: Int!
  updated_at: DateTime!
  virtual_course: Boolean!
}

input CourseInput {
  active: Boolean!
  course_description: String!
  course_name: String!
  virtual_course: Boolean!
}

type CoursesToCoursework {
  course_and_coursework_id: Int!
  course_id: Int!
  coursework_id: Int!
}

type Coursework {
  active: Boolean!
  courses: [Course!]!
  coursework_description: String
  coursework_id: Int!
  coursework_name: String!
  created_by: Int!
}

input CourseworkInput {
  active: Boolean!
  coursework_description: String
  coursework_id: Int!
  coursework_name: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type License {
  client: Client!
  client_id: Int!
  course: Course!
  course_id: Int!
  license_changes: [LicenseChange!]!
  license_id: Int!
  remaining_amount: Int!
}

type LicenseChange {
  amount_change: Int!
  change_note: String!
  created_at: DateTime!
  created_by: Int!
  license_change_id: Int!
  license_id: Int!
  manager_id: Int!
  updated_amount: Int!
  workshop_id: Int
}

input LicenseInput {
  change_note: String!
  client_id: Int!
  course_id: Int!
  license_id: Int
  remaining_amount: Int!
  workshop_id: Int
}

type Manager {
  active: Boolean!
  active_clients: [Client!]!
  active_workshops: [Workshop!]!
  assignments: [ManagerAssignment!]!
  clients: [Client!]!
  email: String!
  first_name: String!
  last_name: String!
  manager_id: Int!
  user_type: USER_TYPE!
  workshops: [Workshop!]!
}

type ManagerAssignment {
  active: Boolean!
  assignment_id: Int!
  manager_id: Int!
  workshop_id: Int!
}

input ManagerInput {
  email: String!
  email_password: String!
  first_name: String!
  last_name: String!
  user_type: USER_TYPE!
}

type Mutation {
  addAdvisor(email: String!, first_name: String!, last_name: String!): Advisor!
  addAdvisorLanguage(advisor_id: Float!, language: String!): AdvisorLanguage!
  addAdvisorNote(advisor_id: Int!, advisor_note: String!): AdvisorNote!
  addAdvisorRegion(advisor_id: Int!, advisor_region: REGION!): AdvisorRegion!
  addAdvisorUnavailableDay(unavailable_day_info: UnavailableDayInfo!): AdvisorUnavailableDay!
  addClient(business_unit: String, client_name: String!): Client!
  addCourse(courseData: CourseInput!): Course!
  addCoursework(description: String, name: String!): Coursework!
  addManager(managerInput: ManagerInput!): Manager!
  addManagerToWorkshop(manager_id: Int!, workshop_id: Int!): ManagerAssignment!
  changeAdvisorActiveStatus(active: Boolean!, advisor_id: Int!): Advisor!
  changeClientActiveStatus(active: Boolean!, client_id: Int!): Client!
  changeManagerActiveStatus(active: Boolean!, manager_id: Int!): Client!
  changeManagerAssignmentStatus(active: Boolean!, assignment_id: Int!): ManagerAssignment!
  changeMyPassword(newPassword: String!): Manager!
  changePasswordAdminAccess(manager_id: Int!, newPassword: String!): Manager!
  editAdvisor(advisor_id: Int!, email: String, first_name: String, last_name: String): Advisor!
  editAdvisorNote(advisor_note: String!, note_id: Int!): AdvisorNote!
  editAdvisorUnavailableDay(unavailable_day_info: UnavailableDayInfoWithID!): AdvisorUnavailableDay!
  editClient(business_unit: String, client_id: Int!, client_name: String!): Client!
  editCourse(courseData: CourseInput!, course_id: Int!): Course!
  editCoursework(courseworkInput: CourseworkInput!): Coursework!
  editLicenseAmount(licenseInput: LicenseInput!): License!
  editManager(managerInput: ManagerInput!, manager_id: Float!): Manager!
  forgotPassword(email: String!): Boolean!
  login(email: String!, password: String!): Manager!
  logout: Boolean!
  registerAsCourseMaterial(course_id: Int!, coursework_id: Int!): CoursesToCoursework!
  removeAdvisor(advisor_id: Int!): Advisor!
  removeAdvisorLanguage(language_id: Int!): AdvisorLanguage!
  removeAdvisorNote(note_id: Int!): AdvisorNote!
  removeAdvisorRegion(region_id: Int!): AdvisorRegion!
  removeAdvisorUnavailableDay(unavailable_id: Int!): AdvisorUnavailableDay!
  removeClient(client_id: Int!): Client!
  removeCourse(course_id: Int!): Course!
  removeCoursework(coursework_id: Int!): Coursework!
  removeFromCourseMaterial(course_and_coursework_id: Int!): CoursesToCoursework!
  removeManager(manager_id: Float!): Manager!
  removeManagerFromWorkshop(assignment_id: Int!): ManagerAssignment!
  resetPassword(newPassword: String!, token: String!): Manager!
}

type Query {
  fetchManager: Manager
  getAdvisor(advisor_id: Int!): Advisor
  getAllAdvisorLanguages(language: String): [AdvisorLanguage!]!
  getAllAdvisors: [Advisor!]!
  getAllClients: [Client!]
  getAllCourses: [Course!]!
  getAllCoursework: [Coursework!]!
  getAllManagers: [Manager!]!
  getAllWorkshops(filters: WorkshopFilterOptions, orderBy: [WorkshopsOrderBy!], skip: Float, take: Float): [Workshop!]!
  getClient(client_id: Int!): Client
  getCourse(course_id: Int!): Course
  getSession(sessionID: Float!): [WorkshopSession!]!
  getWorkshop(workshop_id: Int!): Workshop!
}

"""international business regions"""
enum REGION {
  ANZ
  APAC
  EMEA
  LATAM
  NAM
}

"""status of workshops and individual session requests"""
enum SESSION_STATUS {
  CANCELLED
  COMPLETED
  HOLDING
  REQUESTED
  SCHEDULED
  VETTING
}

"""distinguish between ordinary users and those with admin access"""
enum USER_TYPE {
  ADMIN
  USER
}

input UnavailableDayInfo {
  advisor_id: Int!
  day_unavailable: DateTime!
  note: String
}

input UnavailableDayInfoWithID {
  advisor_id: Int!
  day_unavailable: DateTime!
  note: String
  unavailable_id: Int!
}

type Workshop {
  assignedAdvisor: [Advisor!]!
  assigned_advisor: Advisor
  assigned_advisor_id: Int!
  backupRequestedAdvisor: [Advisor!]!
  backup_requested_advisor: Advisor
  backup_requested_advisor_id: Int!
  changeLog: [ChangeLog!]!
  change_log: [ChangeLog!]!
  class_size: Int
  client: Client!
  client_id: Int!
  cohort_name: String!
  course: Course!
  course_id: Int!
  coursework: [Coursework!]!
  created_at: DateTime!
  created_by: Int!
  deleted: Boolean!
  group_id: Int!
  in_person: Boolean!
  launch_participant_sign_ups: Boolean!
  managers: [Manager!]!
  notes: [WorkshopNote!]!
  open_air_id: String!
  participant_sign_up_link: String!
  record_attendance: Boolean!
  requestedAdvisor: [Advisor!]!
  requested_advisor: Advisor!
  requested_advisor_id: Int!
  sessions: [WorkshopSession!]!
  time_zone: String!
  workshop_end_date: DateTime!
  workshop_id: Int!
  workshop_language: String!
  workshop_location: String!
  workshop_notes: [WorkshopNote!]!
  workshop_region: REGION!
  workshop_start_date: DateTime!
  workshop_status: SESSION_STATUS!
}

input WorkshopFilterOptions {
  assigned_advisor_id: Float
  client_id: Float
  cohort_name: String
  deleted: Boolean
  group_id: Float
  in_person: Boolean
  open_air_id: String
  workshop_end_date: DateTime
  workshop_groups: Float
  workshop_id: Float
  workshop_start_date: DateTime
  workshop_status: [SESSION_STATUS!]
}

type WorkshopNote {
  created_at: DateTime!
  created_by: Int!
  note: String!
  note_id: Int!
  workshop_id: Int!
}

type WorkshopSession {
  created_at: DateTime!
  created_by: Int!
  date_and_time: DateTime!
  duration_in_hours: Float!
  session_name: String!
  session_status: SESSION_STATUS!
  workshop_id: Float!
  workshop_session_id: Int!
  zoom_link: String
}

input WorkshopsOrderBy {
  column: String!
  direction: String!
}
