# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Advisor {
  advisor_id: Int!
  advisor_notes: [AdvisorNote!]!
  email: String!
  first_name: String!
  languages: [AdvisorLanguage!]!
  last_name: String!
  regions: [AdvisorRegion!]!
  unavailable_days: [AdvisorUnavailableDay!]!
}

type AdvisorLanguage {
  advisor: Advisor!
  advisor_id: Int!
  advisor_language: String!
  language_id: Int!
}

type AdvisorNote {
  advisor_id: Int!
  advisor_note: String!
  note_id: Int!
}

type AdvisorRegion {
  advisor_id: Int!
  advisor_region: REGION!
  region_id: Int!
}

type AdvisorUnavailableDay {
  advisor_id: Int!
  day_unavailable: DateTime!
  note: String
  unavailable_id: Int!
}

type Client {
  business_unit: String
  client_id: Int!
  client_name: String!
}

type Course {
  active: Boolean!
  course_description: String!
  course_id: Int!
  course_name: String!
  coursework: [Coursework!]!
  created_at: DateTime!
  updated_at: DateTime!
  virtual_course: Boolean!
}

input CourseInput {
  active: Boolean!
  course_description: String!
  course_name: String!
  virtual_course: Boolean!
}

type CoursesToCoursework {
  course_and_coursework_id: Int!
  course_id: Int!
  coursework_id: Int!
}

type Coursework {
  active: Boolean!
  courses: [Course!]!
  coursework_description: String
  coursework_id: Int!
  coursework_name: String!
}

input CourseworkInput {
  active: Boolean!
  coursework_description: String
  coursework_id: Int!
  coursework_name: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type ManagerAssignment {
  assignment_id: Int!
  manager_id: Int!
  workshop_id: Int!
}

type Mutation {
  addAdvisor(email: String!, first_name: String!, last_name: String!): Advisor!
  addAdvisorLanguage(advisor_id: Float!, language: String!): AdvisorLanguage!
  addAdvisorNote(advisor_id: Int!, advisor_note: String!): AdvisorNote!
  addAdvisorRegion(advisor_id: Int!, advisor_region: REGION!): AdvisorRegion!
  addAdvisorUnavailableDay(unavailable_day_info: UnavailableDayInfo!): AdvisorUnavailableDay!
  addClient(business_unit: String, client_name: String!): Client!
  addCourse(courseData: CourseInput!): Course!
  addCoursework(description: String, name: String!): Coursework!
  addManagerToWorkshop(manager_id: Int!, workshop_id: Int!): ManagerAssignment!
  changeManagerAssignmentStatus(active: Boolean!, assignment_id: Int!): ManagerAssignment!
  editAdvisor(advisor_id: Int!, email: String, first_name: String, last_name: String): Advisor!
  editAdvisorNote(advisor_note: String!, note_id: Int!): AdvisorNote!
  editAdvisorUnavailableDay(unavailable_day_info: UnavailableDayInfoWithID!): AdvisorUnavailableDay!
  editClient(business_unit: String, client_id: Int!, client_name: String!): Client!
  editCourse(courseData: CourseInput!, course_id: Int!): Course!
  editCoursework(courseworkInput: CourseworkInput!): Coursework!
  registerAsCourseMaterial(course_id: Int!, coursework_id: Int!): CoursesToCoursework!
  removeAdvisor(advisor_id: Int!): Advisor!
  removeAdvisorLanguage(language_id: Int!): AdvisorLanguage!
  removeAdvisorNote(note_id: Int!): AdvisorNote!
  removeAdvisorRegion(region_id: Int!): AdvisorRegion!
  removeAdvisorUnavailableDay(unavailable_id: Int!): AdvisorUnavailableDay!
  removeClient(client_id: Int!): Client!
  removeCourse(course_id: Int!): Course!
  removeCoursework(coursework_id: Int!): Coursework!
  removeFromCourseMaterial(course_and_coursework_id: Int!): CoursesToCoursework!
  removeManagerFromWorkshop(assignment_id: Int!): ManagerAssignment!
}

type Query {
  getAdvisor(advisor_id: Int!): Advisor!
  getAllAdvisorLanguages(language: String): [AdvisorLanguage!]!
  getAllAdvisors: [Advisor!]!
  getAllClients: [Client!]
  getAllCourses: [Course!]!
  getAllCoursework: [Coursework!]!
  getClient(client_id: Int!): Client
  getCourse(course_id: Int!): Course
  getSession(sessionID: Float!): [WorkshopSession!]!
}

"""international business regions"""
enum REGION {
  ANZ
  APAC
  EMEA
  LATAM
  NAM
}

type RequestedStartTime {
  earliest_start_time: DateTime!
  latest_start_time: DateTime!
  request_id: Int!
  workshop_session_id: Int!
}

"""status of workshops and individual session requests"""
enum SESSION_STATUS {
  COMPLETED
  HOLD_A
  HOLD_B
  REQUESTED
  SCHEDULED
}

type SessionNote {
  note: String!
  note_id: Int!
  workshop_session_id: Int!
}

input UnavailableDayInfo {
  advisor_id: Int!
  day_unavailable: DateTime!
  note: String
}

input UnavailableDayInfoWithID {
  advisor_id: Int!
  day_unavailable: DateTime!
  note: String
  unavailable_id: Int!
}

type WorkshopSession {
  date_and_time: DateTime
  duration_in_hours: Float!
  requested_start_times: [RequestedStartTime!]!
  session_name: String!
  session_notes: [SessionNote!]!
  session_status: SESSION_STATUS!
  workshop_id: Float!
  workshop_session_id: Int!
  zoom_link: String
}
