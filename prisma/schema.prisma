generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model advisors {
  advisor_id                                             Int                @id @default(autoincrement())
  email                                                  String             @unique @db.VarChar(255)
  first_name                                             String             @db.VarChar(255)
  last_name                                              String             @db.VarChar(255)
  advisor_notes                                          advisor_notes[]
  languages                                              languages[]
  regions                                                regions[]
  unavailable_days                                       unavailable_days[]
  workshops_advisorsToworkshops_assigned_advisor         workshops[]        @relation("advisorsToworkshops_assigned_advisor")
  workshops_advisorsToworkshops_backup_requested_advisor workshops[]        @relation("advisorsToworkshops_backup_requested_advisor")
  workshops_advisorsToworkshops_requested_advisor        workshops[]        @relation("advisorsToworkshops_requested_advisor")
}

model change_log {
  log_id      Int       @id @default(autoincrement())
  workshop_id Int
  note        String
  log_date    DateTime  @db.Timestamptz(6)
  workshops   workshops @relation(fields: [workshop_id], references: [workshop_id])
}

model clients {
  client_id     Int         @id @default(autoincrement())
  client_name   String      @db.VarChar(255)
  business_unit String?     @db.VarChar(255)
  workshops     workshops[]
}

model courses {
  course_id          Int         @id @default(autoincrement())
  course_name        String      @unique @db.VarChar(255)
  course_description String
  active             Boolean
  virtual_course     Boolean
  created_at         DateTime    @default(now()) @db.Timestamptz(6)
  updated_at         DateTime    @default(now()) @db.Timestamptz(6)
  workshops          workshops[]
}

model languages {
  language_id      Int      @id @default(autoincrement())
  advisor_id       Int
  advisor_language String   @db.VarChar(255)
  advisors         advisors @relation(fields: [advisor_id], references: [advisor_id])
}

model manager_assignments {
  assignment_id Int       @id @default(autoincrement())
  workshop_id   Int
  manager_id    Int
  active        Boolean
  managers      managers  @relation(fields: [manager_id], references: [manager_id])
  workshops     workshops @relation(fields: [workshop_id], references: [workshop_id])
}

model managers {
  manager_id          Int                   @id @default(autoincrement())
  first_name          String                @db.VarChar(255)
  last_name           String                @db.VarChar(255)
  email               String                @unique @db.VarChar(255)
  email_password      String                @db.VarChar(255)
  manager_assignments manager_assignments[]
}

model regions {
  region_id      Int         @id @default(autoincrement())
  advisor_id     Int
  advisor_region region_enum
  advisors       advisors    @relation(fields: [advisor_id], references: [advisor_id])
}

model unavailable_days {
  unavailable_id  Int      @id @default(autoincrement())
  advisor_id      Int
  day_unavailable DateTime @db.Date
  note            String?
  advisors        advisors @relation(fields: [advisor_id], references: [advisor_id])
}

model workshop_notes {
  note_id     Int       @id @default(autoincrement())
  workshop_id Int
  note        String
  workshops   workshops @relation(fields: [workshop_id], references: [workshop_id])
}

model workshop_sessions {
  workshop_session_id   Int                     @id @default(autoincrement())
  workshop_id           Int
  date_and_time         DateTime?               @db.Timestamptz(6)
  session_status        session_status_enum
  duration_in_hours     Decimal                 @db.Decimal(2, 1)
  zoom_link             String?                 @db.VarChar(255)
  workshops             workshops               @relation(fields: [workshop_id], references: [workshop_id])
  requested_start_times requested_start_times[]
  session_notes         session_notes[]
}

model workshops {
  workshop_id                                           Int                   @id @default(autoincrement())
  course_id                                             Int
  requested_advisor                                     Int
  backup_requested_advisor                              Int?
  assigned_advisor                                      Int?
  workshop_location                                     String                @db.VarChar(255)
  workshop_region                                       region_enum
  client_id                                             Int
  open_air_id                                           String                @db.VarChar(255)
  time_zone                                             String                @db.VarChar(10)
  workshop_language                                     String                @db.VarChar(255)
  record_attendance                                     Boolean
  advisors_advisorsToworkshops_assigned_advisor         advisors?             @relation("advisorsToworkshops_assigned_advisor", fields: [assigned_advisor], references: [advisor_id])
  advisors_advisorsToworkshops_backup_requested_advisor advisors?             @relation("advisorsToworkshops_backup_requested_advisor", fields: [backup_requested_advisor], references: [advisor_id])
  clients                                               clients               @relation(fields: [client_id], references: [client_id])
  courses                                               courses               @relation(fields: [course_id], references: [course_id])
  advisors_advisorsToworkshops_requested_advisor        advisors              @relation("advisorsToworkshops_requested_advisor", fields: [requested_advisor], references: [advisor_id])
  change_log                                            change_log[]
  manager_assignments                                   manager_assignments[]
  workshop_notes                                        workshop_notes[]
  workshop_sessions                                     workshop_sessions[]
}

model requested_start_times {
  request_id          Int               @id @default(autoincrement())
  workshop_session_id Int
  earliest_start_time DateTime          @db.Timestamptz(6)
  latest_start_time   DateTime          @db.Timestamptz(6)
  workshop_sessions   workshop_sessions @relation(fields: [workshop_session_id], references: [workshop_session_id])
}

model session_notes {
  note_id             Int               @id @default(autoincrement())
  workshop_session_id Int
  note                String
  workshop_sessions   workshop_sessions @relation(fields: [workshop_session_id], references: [workshop_session_id])
}

model advisor_notes {
  note_id      Int      @id @default(autoincrement())
  advisor_id   Int
  advisor_note String
  advisors     advisors @relation(fields: [advisor_id], references: [advisor_id])
}

enum session_status_enum {
  REQUESTED
  SCHEDULED
  COMPLETED
  HOLD_A @map("HOLD A")
  HOLD_B @map("HOLD B")
}

enum region_enum {
  NAM
  LATAM
  EMEA
  APAC
  ANZ
}
