generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model advisors {
  advisor_id                                                Int                @id @default(autoincrement())
  email                                                     String             @unique @db.VarChar(255)
  first_name                                                String             @db.VarChar(255)
  last_name                                                 String             @db.VarChar(255)
  active                                                    Boolean            @default(true)
  advisor_notes                                             advisor_notes[]
  languages                                                 languages[]
  regions                                                   regions[]
  unavailable_days                                          unavailable_days[]
  workshops_advisorsToworkshops_assigned_advisor_id         workshops[]        @relation("advisorsToworkshops_assigned_advisor_id")
  workshops_advisorsToworkshops_backup_requested_advisor_id workshops[]        @relation("advisorsToworkshops_backup_requested_advisor_id")
  workshops_advisorsToworkshops_requested_advisor_id        workshops[]        @relation("advisorsToworkshops_requested_advisor_id")
}

model change_log {
  log_id      Int       @id @default(autoincrement())
  workshop_id Int
  note        String
  log_date    DateTime  @default(now()) @db.Timestamptz(6)
  workshops   workshops @relation(fields: [workshop_id], references: [workshop_id])
}

model clients {
  client_id       Int               @id @default(autoincrement())
  client_name     String            @db.VarChar(255)
  business_unit   String?           @db.VarChar(255)
  active          Boolean           @default(true)
  client_notes    client_notes[]
  licenses        licenses[]
  manager_clients manager_clients[]
  workshops       workshops[]
}

model courses {
  course_id              Int                      @id @default(autoincrement())
  course_name            String                   @unique @db.VarChar(255)
  course_description     String
  active                 Boolean                  @default(true)
  virtual_course         Boolean
  created_at             DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at             DateTime                 @default(now()) @db.Timestamptz(6)
  courses_and_coursework courses_and_coursework[]
  licenses               licenses[]
  workshop_session_sets  workshop_session_sets[]
  workshops              workshops[]
}

model languages {
  language_id      Int      @id @default(autoincrement())
  advisor_id       Int
  advisor_language String   @db.VarChar(255)
  advisors         advisors @relation(fields: [advisor_id], references: [advisor_id])
}

model manager_assignments {
  assignment_id Int       @id @default(autoincrement())
  workshop_id   Int
  manager_id    Int
  active        Boolean   @default(true)
  managers      managers  @relation(fields: [manager_id], references: [manager_id])
  workshops     workshops @relation(fields: [workshop_id], references: [workshop_id])
}

model managers {
  manager_id          Int                   @id @default(autoincrement())
  first_name          String                @db.VarChar(255)
  last_name           String                @db.VarChar(255)
  email               String                @unique @db.VarChar(255)
  email_password      String                @db.VarChar(255)
  user_type           user_type_enum
  active              Boolean               @default(true)
  license_changes     license_changes[]
  manager_assignments manager_assignments[]
  manager_clients     manager_clients[]
}

model regions {
  region_id      Int         @id @default(autoincrement())
  advisor_id     Int
  advisor_region region_enum
  advisors       advisors    @relation(fields: [advisor_id], references: [advisor_id])
}

model unavailable_days {
  unavailable_id  Int      @id @default(autoincrement())
  advisor_id      Int
  day_unavailable DateTime @db.Date
  note            String?
  advisors        advisors @relation(fields: [advisor_id], references: [advisor_id])
}

model workshop_notes {
  note_id      Int       @id @default(autoincrement())
  workshop_id  Int
  note         String
  date_of_note DateTime  @default(now()) @db.Timestamptz(6)
  workshops    workshops @relation(fields: [workshop_id], references: [workshop_id])
}

model workshop_sessions {
  workshop_session_id   Int                     @id @default(autoincrement())
  workshop_id           Int
  session_name          String                  @db.VarChar(255)
  date_and_time         DateTime?               @db.Timestamptz(6)
  session_status        session_status_enum
  duration_in_hours     Decimal                 @db.Decimal(2, 1)
  zoom_link             String?                 @db.VarChar(255)
  workshops             workshops               @relation(fields: [workshop_id], references: [workshop_id])
  requested_start_times requested_start_times[]
  session_notes         session_notes[]
}

model workshops {
  workshop_id                                              Int                   @id @default(autoincrement())
  course_id                                                Int
  cohort_name                                              String                @db.VarChar(255)
  requested_advisor_id                                     Int
  backup_requested_advisor_id                              Int?
  assigned_advisor_id                                      Int?
  workshop_location                                        String                @db.VarChar(255)
  workshop_region                                          region_enum
  class_size                                               Int?
  client_id                                                Int
  open_air_id                                              String                @db.VarChar(255)
  time_zone                                                String                @db.VarChar(10)
  workshop_language                                        String                @db.VarChar(255)
  record_attendance                                        Boolean
  deleted                                                  Boolean               @default(false)
  advisors_advisorsToworkshops_assigned_advisor_id         advisors?             @relation("advisorsToworkshops_assigned_advisor_id", fields: [assigned_advisor_id], references: [advisor_id])
  advisors_advisorsToworkshops_backup_requested_advisor_id advisors?             @relation("advisorsToworkshops_backup_requested_advisor_id", fields: [backup_requested_advisor_id], references: [advisor_id])
  clients                                                  clients               @relation(fields: [client_id], references: [client_id])
  courses                                                  courses               @relation(fields: [course_id], references: [course_id])
  advisors_advisorsToworkshops_requested_advisor_id        advisors              @relation("advisorsToworkshops_requested_advisor_id", fields: [requested_advisor_id], references: [advisor_id])
  change_log                                               change_log[]
  license_changes                                          license_changes[]
  manager_assignments                                      manager_assignments[]
  workshop_coursework                                      workshop_coursework[]
  workshop_notes                                           workshop_notes[]
  workshop_sessions                                        workshop_sessions[]
}

model requested_start_times {
  request_id          Int               @id @default(autoincrement())
  workshop_session_id Int
  earliest_start_time DateTime          @db.Timestamptz(6)
  latest_start_time   DateTime          @db.Timestamptz(6)
  workshop_sessions   workshop_sessions @relation(fields: [workshop_session_id], references: [workshop_session_id])
}

model session_notes {
  note_id             Int               @id @default(autoincrement())
  workshop_session_id Int
  note                String
  date_of_note        DateTime          @default(now()) @db.Timestamptz(6)
  workshop_sessions   workshop_sessions @relation(fields: [workshop_session_id], references: [workshop_session_id])
}

model advisor_notes {
  note_id      Int      @id @default(autoincrement())
  advisor_id   Int
  advisor_note String
  date_of_note DateTime @default(now()) @db.Timestamptz(6)
  advisors     advisors @relation(fields: [advisor_id], references: [advisor_id])
}

model courses_and_coursework {
  course_and_coursework_id Int        @id @default(autoincrement())
  course_id                Int
  coursework_id            Int
  courses                  courses    @relation(fields: [course_id], references: [course_id])
  coursework               coursework @relation(fields: [coursework_id], references: [coursework_id])
}

model coursework {
  coursework_id          Int                      @id @default(autoincrement())
  coursework_name        String                   @unique @db.VarChar(255)
  coursework_description String?
  active                 Boolean                  @default(true)
  courses_and_coursework courses_and_coursework[]
  workshop_coursework    workshop_coursework[]
}

model workshop_coursework {
  workshop_coursework_id Int        @id @default(autoincrement())
  workshop_id            Int
  coursework_id          Int
  coursework             coursework @relation(fields: [coursework_id], references: [coursework_id])
  workshops              workshops  @relation(fields: [workshop_id], references: [workshop_id])
}

model manager_clients {
  manager_client_id Int      @id @default(autoincrement())
  manager_id        Int
  client_id         Int
  active            Boolean  @default(true)
  clients           clients  @relation(fields: [client_id], references: [client_id])
  managers          managers @relation(fields: [manager_id], references: [manager_id])
}

model workshop_session_sets {
  session_set_id Int     @id @default(autoincrement())
  course_id      Int
  session_name   String  @db.VarChar(255)
  session_order  Int
  courses        courses @relation(fields: [course_id], references: [course_id])
}

model client_notes {
  note_id      Int      @id @default(autoincrement())
  client_id    Int
  note         String
  date_of_note DateTime @default(now()) @db.Timestamptz(6)
  clients      clients  @relation(fields: [client_id], references: [client_id])
}

model license_changes {
  license_change_id Int        @id @default(autoincrement())
  license_id        Int
  updated_amount    Int
  amount_change     Int
  workshop_id       Int?
  manager_id        Int
  date_of_change    DateTime   @default(now()) @db.Timestamptz(6)
  change_note       String
  licenses          licenses   @relation(fields: [license_id], references: [license_id])
  managers          managers   @relation(fields: [manager_id], references: [manager_id])
  workshops         workshops? @relation(fields: [workshop_id], references: [workshop_id])
}

model licenses {
  license_id       Int               @id @default(autoincrement())
  course_id        Int
  client_id        Int
  remaining_amount Int
  clients          clients           @relation(fields: [client_id], references: [client_id])
  courses          courses           @relation(fields: [course_id], references: [course_id])
  license_changes  license_changes[]
}

enum session_status_enum {
  REQUESTED
  SCHEDULED
  COMPLETED
  HOLD_A @map("HOLD A")
  HOLD_B @map("HOLD B")
}

enum region_enum {
  NAM
  LATAM
  EMEA
  APAC
  ANZ
}

enum user_type_enum {
  USER
  ADMIN
}
