import { Request, Response } from 'express'
import { Redis } from 'ioredis'
import { redis } from './redis'
import { Session } from 'express-session'
import { prisma } from '../prisma'
import { PrismaClient } from '@prisma/client'

// for use in prod / dev
export type HTTPContext = {
  req: Request & { session: IGetSessionInfo }
  res: Response
  redis: Redis
  prisma: PrismaClient
}

type Prisma = typeof prisma
export type UserRole = 'USER' | 'COORDINATOR' | 'ADMIN' | 'SUPERADMIN'

// extend express-sessions with custom fields
interface IGetSessionInfo extends Session {
  manager_id?: number
  role?: UserRole
}

// define customized req and res fields
interface IReqRes {
  req: Request & { session: IGetSessionInfo }
  res: Response
}

// generate context for production
// capturing real req/ res arguments as generated by the client
export const createContext = ({ req, res }: IReqRes): HTTPContext => ({
  req,
  res,
  redis,
  prisma,
})

// mock context for server-side unit testing
interface MockContext {
  req: {
    session: { manager_id?: number; role?: UserRole; destroy: () => void }
    ip: string
  }
  res: { clearCookie: () => void }
  redis: Redis
  prisma: Prisma
}

// generate a mock context for a base user without admin access
export const createMockUserContext = (): MockContext => ({
  req: {
    session: { manager_id: 2, role: 'USER', destroy: () => {} },
    ip: 'mock-ip:1111',
  },
  res: { clearCookie: () => {} },
  redis,
  prisma,
})

// generate a mock context for a coordinator without admin access
export const createMockCoordinatorContext = (): MockContext => ({
  req: {
    session: { manager_id: 4, role: 'COORDINATOR', destroy: () => {} },
    ip: 'mock-ip:1111',
  },
  res: { clearCookie: () => {} },
  redis,
  prisma,
})

// generate a mock context for an admin
export const createMockAdminContext = (): MockContext => ({
  req: {
    session: { manager_id: 1, role: 'ADMIN', destroy: () => {} },
    ip: 'mock-ip:1111',
  },
  res: { clearCookie: () => {} },
  redis,
  prisma,
})

// generate a mock context for a superadmin
export const createMockSuperAdminContext = (): MockContext => ({
  req: {
    session: { manager_id: 5, role: 'SUPERADMIN', destroy: () => {} },
    ip: 'mock-ip:1111',
  },
  res: { clearCookie: () => {} },
  redis,
  prisma,
})

// type signature for real/ mock context creation function
// used for DI when generating apollo server
export type Context = HTTPContext | MockContext
export type CreateContext = typeof createContext | typeof createMockUserContext
